import os
import logging
import tempfile
import subprocess
import gc
import sys
from urllib.parse import urlparse

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from pytube import YouTube
from google.cloud import vision
import requests
import ffmpeg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
OMDB_API_URL = "http://www.omdbapi.com/"
CORTOS_API_URL = "https://api.cortos.xyz/v1/recognize"

def check_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        subprocess.run(["ffmpeg", "-version"], capture_output=True, check=True)
        logger.info("FFmpeg –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ FFmpeg: {e}")
        return False

def download_video(url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    try:
        if "youtube.com" in url or "youtu.be" in url:
            logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ YouTube –≤–∏–¥–µ–æ: {url}")
            yt = YouTube(url)
            stream = yt.streams.filter(only_audio=True, file_extension='mp4').first()
            if not stream:
                raise ValueError("–ü–æ–¥—Ö–æ–¥—è—â–∏–π –ø–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
            temp_file = tempfile.NamedTemporaryFile(suffix='.mp4', delete=False)
            stream.download(filename=temp_file.name)
            logger.info(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_file.name}")
            return temp_file.name
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
        raise

def extract_frame(video_path: str, timestamp: int = 5) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ–∫—É–Ω–¥–µ"""
    try:
        frame_path = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False).name
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ –∏–∑: {video_path}")
        
        (
            ffmpeg
            .input(video_path, ss=timestamp)
            .output(frame_path, vframes=1, qscale=0)
            .run(capture_stdout=True, capture_stderr=True, overwrite_output=True)
        )
        logger.info(f"–ö–∞–¥—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {frame_path}")
        return frame_path
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {e}")
        raise

def detect_with_google_vision(image_path: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision API"""
    try:
        client = vision.ImageAnnotatorClient()
        
        with open(image_path, 'rb') as image_file:
            content = image_file.read()
        
        image = vision.Image(content=content)
        response = client.web_detection(image=image)
        web_detection = response.web_detection
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
        candidates = []
        
        # –õ—É—á—à–∞—è –¥–æ–≥–∞–¥–∫–∞
        if web_detection.best_guess_labels:
            candidates.append(web_detection.best_guess_labels[0].label)
            
        # –í–µ–±-—Å—É—â–Ω–æ—Å—Ç–∏ —Å –≤—ã—Å–æ–∫–∏–º –¥–æ–≤–µ—Ä–∏–µ–º
        if web_detection.web_entities:
            for entity in web_detection.web_entities:
                if entity.description and entity.score > 0.7:
                    candidates.append(entity.description)
        
        # URL —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≤ URL)
        if web_detection.full_matching_images:
            for img in web_detection.full_matching_images:
                if img.url:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ URL
                    parsed = urlparse(img.url)
                    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏
                    path_part = parsed.path.split('/')[-1]
                    if path_part:
                        candidates.append(path_part.replace('-', ' '))
        
        # –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if web_detection.pages_with_matching_images:
            for page in web_detection.pages_with_matching_images:
                if page.url:
                    parsed = urlparse(page.url)
                    path_part = parsed.path.split('/')[-1]
                    if path_part:
                        candidates.append(path_part.replace('-', ' '))
                if page.page_title:
                    candidates.append(page.page_title)
        
        return ", ".join(candidates) if candidates else ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google Vision: {e}")
        return ""

def recognize_with_cortos(image_path: str) -> str:
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ñ–∏–ª—å–º —á–µ—Ä–µ–∑ Cortos API (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò)"""
    try:
        headers = {"Authorization": f"Bearer {os.getenv('CORTOS_API_KEY')}"}
        
        with open(image_path, 'rb') as img_file:
            files = {'image': img_file}
            response = requests.post(CORTOS_API_URL, headers=headers, files=files, timeout=15)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('matches'):
                # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                return data['matches'][0]['title']
        return ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Cortos API: {e}")
        return ""

def detect_content(image_path: str) -> str:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: –∫–æ–º–±–∏–Ω–∞—Ü–∏—è Vision + Cortos"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Google Vision
    vision_result = detect_with_google_vision(image_path)
    if vision_result:
        logger.info(f"Google Vision —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {vision_result}")
        return vision_result
    
    # –ï—Å–ª–∏ Vision –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º Cortos
    cortos_result = recognize_with_cortos(image_path)
    if cortos_result:
        logger.info(f"Cortos —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {cortos_result}")
        return cortos_result
    
    return ""

def search_media(title: str) -> dict:
    """–ò—â–µ—Ç –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ OMDb API"""
    try:
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
        titles = [t.strip() for t in title.split(',')] if ',' in title else [title]
        
        for t in titles:
            params = {
                'apikey': os.getenv('OMDB_API_KEY'),
                't': t,
                'type': 'movie,series,episode',
                'plot': 'short'
            }
            
            logger.info(f"–ü–æ–∏—Å–∫ –º–µ–¥–∏–∞ –¥–ª—è: {t}")
            response = requests.get(OMDB_API_URL, params=params, timeout=10)
            data = response.json()
            
            if data.get('Response') == 'True':
                return data
        
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ–¥–∏–∞: {e}")
        return {}

def format_media_info(media_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
    if not media_data:
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title = media_data.get('Title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    year = media_data.get('Year', 'N/A')
    media_type = media_data.get('Type', 'movie').capitalize()
    rating = media_data.get('imdbRating', 'N/A')
    plot = media_data.get('Plot', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    info = f"üé¨ {title} ({year})"
    info += f"\nüìÄ –¢–∏–ø: {media_type}"
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if media_data.get('totalSeasons'):
        info += f"\nüî¢ –°–µ–∑–æ–Ω–æ–≤: {media_data['totalSeasons']}"
    if media_data.get('Runtime'):
        info += f"\n‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {media_data['Runtime']}"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    info += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/10"
    info += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {plot[:300]}{'...' if len(plot) > 300 else ''}"
    
    # –ü–æ—Å—Ç–µ—Ä
    if media_data.get('Poster') and media_data['Poster'] != 'N/A':
        info += f"\n\nüñº {media_data['Poster']}"
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ IMDb
    if media_data.get('imdbID'):
        info += f"\n\nüîó https://www.imdb.com/title/{media_data['imdbID']}/"
    
    return info

def process_video(url: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    video_path, frame_path = None, None
    
    try:
        video_path = download_video(url)
        frame_path = extract_frame(video_path)
        content = detect_content(frame_path)
        
        if content:
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {content}")
            media_data = search_media(content)
            return format_media_info(media_data)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path in [video_path, frame_path]:
            if path and os.path.exists(path):
                try:
                    os.unlink(path)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {path}: {e}")
        gc.collect()

def process_image(image_path: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        content = detect_content(image_path)
        if content:
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {content}")
            media_data = search_media(content)
            return format_media_info(media_data)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    finally:
        if image_path and os.path.exists(image_path):
            try:
                os.unlink(image_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {image_path}: {e}")
        gc.collect()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n"
            "1. –°—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n"
            "2. –°–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞\n"
            "–∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º!",
            parse_mode='HTML'
        )
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ start –æ—Ç {user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")

async def handle_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å—Å—ã–ª–∫–∞–º–∏"""
    try:
        url = update.message.text.strip()
        parsed_url = urlparse(url)
        
        if not parsed_url.scheme or not parsed_url.netloc:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é URL-—Å—Å—ã–ª–∫—É")
            return
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ URL: {url}")
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ...")
        
        result = process_video(url)
        await update.message.reply_text(result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo_file = await update.message.photo[-1].get_file()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_file = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False)
        await photo_file.download_to_drive(temp_file.name)
        logger.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_file.name}")
        
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = process_image(temp_file.name)
        await update.message.reply_text(result)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("="*50)
        logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        logger.info(f"–í–µ—Ä—Å–∏—è Python: {sys.version}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not check_ffmpeg():
            logger.critical("FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
            return
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv('TELEGRAM_TOKEN')
        if not token:
            raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        if not os.getenv('OMDB_API_KEY'):
            logger.warning("OMDB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü–æ–∏—Å–∫ –º–µ–¥–∏–∞ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        if not os.getenv('CORTOS_API_KEY'):
            logger.warning("CORTOS_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! Cortos —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_url))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        
        # –ó–∞–ø—É—Å–∫
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()
        
    except Exception as e:
        logger.exception("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï")
        raise

if __name__ == '__main__':
    main()

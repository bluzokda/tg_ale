import os
import json
import logging
import requests
import tempfile
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from google.oauth2 import service_account
from google.cloud import vision

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OMDB_API_KEY = os.getenv('OMDB_API_KEY')
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')  # –í–µ—Å—å JSON-–∫–ª—é—á –≤ –æ–¥–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TELEGRAM_TOKEN:
    logger.critical("üõë –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    raise EnvironmentError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if not OMDB_API_KEY:
    logger.critical("üõë –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OMDB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    raise EnvironmentError("OMDB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if not GOOGLE_CREDENTIALS_JSON:
    logger.critical("üõë –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    raise EnvironmentError("GOOGLE_CREDENTIALS_JSON –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# URL –¥–ª—è OMDB API
OMDB_API_URL = "http://www.omdbapi.com/"


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Vision API –∫–ª–∏–µ–Ω—Ç–∞ ===
def get_vision_client():
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç Google Vision API –∏–∑ JSON-–∫–ª—é—á–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    try:
        credentials_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
        credentials = service_account.Credentials.from_service_account_info(credentials_dict)
        return vision.ImageAnnotatorClient(credentials=credentials)
    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON-–∫–ª—é—á–∞ Google: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Vision API: {e}")
    return None


# === –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ –≤ OMDB API ===
def search_omdb(query: str) -> dict:
    """
    –ò—â–µ—Ç —Ñ–∏–ª—å–º/—Å–µ—Ä–∏–∞–ª –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —á–µ—Ä–µ–∑ OMDB API
    """
    if not query or len(query.strip()) < 2:
        return {}
    query = query.strip()

    params = {
        "apikey": OMDB_API_KEY,
        "t": query,
        "plot": "full",
        "r": "json"
    }

    try:
        response = requests.get(OMDB_API_URL, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get("Response") == "True":
                return {
                    "title": data["Title"],
                    "year": data["Year"],
                    "plot": data["Plot"],
                    "rating": data["imdbRating"],
                    "poster": data["Poster"] if data["Poster"] != "N/A" else None,
                    "type": data["Type"].capitalize(),
                    "imdb_id": data["imdbID"]
                }
    except requests.RequestException as e:
        logger.error(f"üåê –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OMDB API: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ OMDB: {e}")

    return {}


# === –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ ===
def format_response(media_info: dict) -> tuple[str, str | None]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–µ–∫—Å—Ç, URL_–ø–æ—Å—Ç–µ—Ä–∞)
    """
    if not media_info:
        text = (
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            "‚Ä¢ –ö–∞–¥—Ä —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º\n"
            "‚Ä¢ –õ–∏—Ü–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∞–∫—Ç—ë—Ä–∞\n"
            "‚Ä¢ –ü–æ—Å—Ç–µ—Ä –∏–ª–∏ –ª–æ–≥–æ—Ç–∏–ø"
        )
        return text, None

    title = media_info['title']
    year = media_info['year']
    media_type = media_info['type']
    rating = media_info['rating']
    plot = media_info['plot']
    poster_url = media_info['poster']
    imdb_id = media_info['imdb_id']

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    info = f"üé¨ <b>{title}</b> ({year})"
    info += f"\nüìå <b>–¢–∏–ø:</b> {media_type}"

    if rating and rating != "N/A":
        info += f"\n‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating}/10"

    info += f"\n\nüìù <i>{plot}</i>"

    # –°—Å—ã–ª–∫–∞ –Ω–∞ OMDB
    link = f"https://www.omdb.com/title/tt{imdb_id}" if imdb_id else "https://www.omdb.com"
    info += f"\n\nüîó <a href='{link}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ OMDB</a>"

    return info, poster_url


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "üé¨ –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Ñ–∏–ª—å–º–∞ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª–∞ ‚Äî "
        "—è –ø–æ–ø—Ä–æ–±—É—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –∑–∞ –∫–∏–Ω–æ!\n\n"
        "–ß–µ–º –ª—É—á—à–µ –∫–∞–¥—Ä (—Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –ª–∏—Ü–æ–º, –ø–æ—Å—Ç–µ—Ä–æ–º), —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –Ω–∞–π—Ç–∏."
    )


# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ ===
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    temp_file_path = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
            await photo_file.download_to_drive(tmp_file.name)
            temp_file_path = tmp_file.name

        logger.info(f"üì∏ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_file_path}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–¥—Ä...")

        # === Google Vision API ===
        client = get_vision_client()
        if not client:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Vision API.\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
            )
            return

        # –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(temp_file_path, 'rb') as image_file:
            content = image_file.read()
        image = vision.Image(content=content)

        # 1. OCR: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        text_response = client.text_detection(image=image)
        detected_text = ""
        if text_response.text_annotations:
            detected_text = text_response.text_annotations[0].description.strip()

        # 2. Web Detection: –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏, –æ–±—ä–µ–∫—Ç—ã, –ª–æ–≥–æ—Ç–∏–ø—ã
        web_response = client.web_detection(image=image)
        web = web_response.web_detection
        celebrities = [ent.description for ent in web.web_entities if len(ent.description) < 40][:3]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_queries = []
        if detected_text:
            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Ç–µ–∫—Å—Ç–∞
            first_line = detected_text.split('\n')[0].strip()
            if len(first_line) > 2:
                search_queries.append(first_line)

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π
        search_queries.extend([c for c in celebrities if len(c) > 2])

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
        search_queries = list(dict.fromkeys(search_queries))

        logger.info(f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {search_queries}")

        # === –ü–æ–∏—Å–∫ –≤ OMDB ===
        media_info = {}
        for query in search_queries:
            logger.info(f"üîé –ü–æ–∏—Å–∫: {query}")
            media_info = search_omdb(query)
            if media_info:
                break

        # === –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
        text, poster_url = format_response(media_info)

        if poster_url and "http" in poster_url:
            try:
                await update.message.reply_photo(
                    photo=poster_url,
                    caption=text,
                    parse_mode='HTML'
                )
            except Exception:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                await update.message.reply_text(text, parse_mode='HTML')
        else:
            await update.message.reply_text(text, parse_mode='HTML')

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        try:
            await update.message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
                "–ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥–æ–π –∫–∞–¥—Ä."
            )
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")


# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main() -> None:
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling()

    except Exception as e:
        logger.critical(f"üõë –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise


if __name__ == '__main__':
    main()

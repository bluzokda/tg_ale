import os
import logging
import tempfile
import gc
import re
import requests
from PIL import Image, ImageEnhance, ImageOps
import pytesseract
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
OMDB_API_URL = "http://www.omdbapi.com/"
KINOPOISK_API_URL = "https://kinopoiskapiunofficial.tech/api/v2.1/films/search-by-keyword"

def preprocess_image(image_path: str) -> Image.Image:
    """–£–ª—É—á—à–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR"""
    try:
        with Image.open(image_path) as img:
            # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
            img.thumbnail((800, 800))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ß/–ë –∏ –ø–æ–≤—ã—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
            img = img.convert('L')
            img = ImageOps.autocontrast(img, cutoff=5)
            
            # –£–ª—É—á—à–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
            enhancer = ImageEnhance.Sharpness(img)
            img = enhancer.enhance(2.0)
            
            return img
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def extract_text_with_tesseract(image: Image.Image) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Tesseract OCR"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        configs = [
            r'--oem 3 --psm 6 -l eng+rus',
            r'--oem 3 --psm 11 -l eng+rus',
            r'--oem 3 --psm 4 -l eng+rus'
        ]
        
        best_text = ""
        for config in configs:
            text = pytesseract.image_to_string(image, config=config).strip()
            # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if len(text) > len(best_text) and any(c.isalpha() for c in text):
                best_text = text
                
        return best_text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Tesseract OCR: {e}")
        return ""

def is_valid_title(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ö–æ–∂ –ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞"""
    # –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –±—É–∫–≤—ã
    if len(text) < 3:
        return False
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±—É–∫–≤
    if not any(char.isalpha() for char in text):
        return False
        
    # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤
    invalid_patterns = [
        r'^[0-9\W]+$',  # –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã
        r'^[a-z]{1,2}\s*=\s*[a-z]{1,2}$',  # –ü—Ä–∏–º–µ—Ä: "a = b"
        r'http[s]?://'  # URL
    ]
    
    for pattern in invalid_patterns:
        if re.search(pattern, text, re.IGNORECASE):
            return False
            
    return True

def clean_title(text: str) -> str:
    """–û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""
    # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    cleaned = re.sub(r'[^\w\s\-:.,!?\'"]', '', text, flags=re.UNICODE)
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –ø–µ—Ä–≤—ã–µ 4 —Å–ª–æ–≤–∞
    lines = cleaned.split('\n')
    if lines:
        words = lines[0].split()[:4]
        return ' '.join(words)
        
    return cleaned

def search_omdb(title: str) -> dict:
    """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OMDb API"""
    try:
        params = {
            'apikey': os.getenv('OMDB_API_KEY'),
            't': title,
            'type': 'movie,series,episode',
            'plot': 'short',
            'r': 'json'
        }
        response = requests.get(OMDB_API_URL, params=params, timeout=15)
        data = response.json()
        return data if data.get('Response') == 'True' else {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OMDb API: {e}")
        return {}

def search_kinopoisk(title: str) -> dict:
    """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Kinopoisk Unofficial API"""
    try:
        headers = {'X-API-KEY': os.getenv('KINOPOISK_API_KEY')}
        params = {'keyword': title}
        
        response = requests.get(
            KINOPOISK_API_URL,
            headers=headers,
            params=params,
            timeout=15
        )
        data = response.json()
        return data['films'][0] if data.get('films') else {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Kinopoisk API: {e}")
        return {}

def convert_kinopoisk_to_omdb(kinopoisk_data: dict) -> dict:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ Kinopoisk –≤ —Ñ–æ—Ä–º–∞—Ç OMDb"""
    return {
        'Title': kinopoisk_data.get('nameRu') or kinopoisk_data.get('nameEn', ''),
        'Year': kinopoisk_data.get('year', 'N/A'),
        'Type': 'movie',
        'Plot': kinopoisk_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
        'Poster': kinopoisk_data.get('posterUrl', ''),
        'imdbRating': kinopoisk_data.get('rating', 'N/A'),
        'Runtime': 'N/A',
        'Response': 'True',
        'Genre': ', '.join(genre['genre'] for genre in kinopoisk_data.get('genres', [])),
        'Director': next((p['name'] for p in kinopoisk_data.get('staff', []) 
                         if p.get('professionKey') == 'DIRECTOR'), 'N/A'),
        'imdbID': f"kp{kinopoisk_data.get('filmId', '')}"
    } if kinopoisk_data else {}

def search_media(title: str) -> dict:
    """–ü–æ–∏—Å–∫ –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ API"""
    # –ü—Ä–æ–±—É–µ–º OMDb –ø–µ—Ä–≤—ã–º
    omdb_result = search_omdb(title)
    if omdb_result:
        return omdb_result
    
    # –ï—Å–ª–∏ OMDb –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º Kinopoisk
    kinopoisk_result = search_kinopoisk(title)
    return convert_kinopoisk_to_omdb(kinopoisk_result)

def format_media_info(media_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
    if not media_data:
        return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    title = media_data.get('Title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    year = media_data.get('Year', 'N/A')
    media_type = "–§–∏–ª—å–º" if media_data.get('Type') == 'movie' else "–°–µ—Ä–∏–∞–ª"
    rating = media_data.get('imdbRating', 'N/A')
    plot = media_data.get('Plot', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    director = media_data.get('Director', 'N/A')
    genre = media_data.get('Genre', 'N/A')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    info = f"üé¨ <b>{title}</b> ({year})"
    info += f"\nüìÄ –¢–∏–ø: {media_type}"
    info += f"\nüé≠ –ñ–∞–Ω—Ä: {genre}"
    
    if director != 'N/A':
        info += f"\nüé• –†–µ–∂–∏—Å—Å–µ—Ä: {director}"
    
    if rating != 'N/A':
        info += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/10"
    
    info += f"\n\nüìù <i>{plot[:300]}{'...' if len(plot) > 300 else ''}</i>"
    
    # –ü–æ—Å—Ç–µ—Ä
    if media_data.get('Poster') and media_data['Poster'] != 'N/A':
        info += f"\n\nüñº <a href='{media_data['Poster']}'>–ü–æ—Å—Ç–µ—Ä</a>"
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
    if media_data.get('imdbID', '').startswith('tt'):
        info += f"\n\nüîó <a href='https://www.imdb.com/title/{media_data['imdbID']}/'>IMDb</a>"
    elif media_data.get('imdbID', '').startswith('kp'):
        kp_id = media_data['imdbID'][2:]
        info += f"\n\nüîó <a href='https://www.kinopoisk.ru/film/{kp_id}/'>–ö–∏–Ω–æ–ø–æ–∏—Å–∫</a>"
    
    return info

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞, "
            "–∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º!\n\n"
            "–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:\n"
            "1. –í—ã–±–∏—Ä–∞–π—Ç–µ –∫–∞–¥—Ä—ã —Å —á–µ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–∑–≤–∞–Ω–∏—è, —Ç–∏—Ç—Ä—ã)\n"
            "2. –ò–∑–±–µ–≥–∞–π—Ç–µ —Å–ª–∏—à–∫–æ–º —Ç–µ–º–Ω—ã—Ö –∏–ª–∏ —Å–≤–µ—Ç–ª—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n"
            "3. –ö–∞–¥—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –∑–∞–Ω–∏–º–∞–ª —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    temp_file_path = None
    try:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        photo_file = await update.message.photo[-2].get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
            await photo_file.download_to_drive(temp_file.name)
            temp_file_path = temp_file.name
            logger.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_file_path}")
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ OCR
            processed_img = preprocess_image(temp_file_path)
            if not processed_img:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return
                
            raw_text = extract_text_with_tesseract(processed_img)
            
            if not raw_text or not any(c.isalpha() for c in raw_text):
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
                return
                
            # –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
            cleaned_text = clean_title(raw_text)
            
            if not is_valid_title(cleaned_text):
                await update.message.reply_text(
                    f"‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {cleaned_text}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —á–µ—Ç–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º"
                )
                return
                
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {cleaned_text}")
            await update.message.reply_text(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ¬´{cleaned_text}¬ª")
            
            # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            media_data = search_media(cleaned_text)
            response = format_media_info(media_data)
            await update.message.reply_text(response, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        gc.collect()

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        token = os.getenv('TELEGRAM_TOKEN')
        if not token:
            raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        if not os.getenv('OMDB_API_KEY') and not os.getenv('KINOPOISK_API_KEY'):
            logger.warning("API –∫–ª—é—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–¥–∏–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        
        # –ó–∞–ø—É—Å–∫
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()
        
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        raise

if __name__ == '__main__':
    main()

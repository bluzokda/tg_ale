import os
import logging
import requests
import tempfile
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from google.cloud import vision

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
OMDB_API_KEY = os.getenv('OMDB_API_KEY')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not OMDB_API_KEY:
    raise EnvironmentError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OMDB_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
if not TELEGRAM_TOKEN:
    raise EnvironmentError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

OMDB_API_URL = "http://www.omdbapi.com/"

def detect_text_and_entities(image_path):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision API"""
    try:
        client = vision.ImageAnnotatorClient()

        with open(image_path, 'rb') as image_file:
            content = image_file.read()
        image = vision.Image(content=content)

        # OCR
        text_response = client.text_detection(image=image)
        texts = text_response.full_text_annotation.text.strip() if text_response.full_text_annotation else ""

        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π –∏ –æ–±—ä–µ–∫—Ç–æ–≤
        web_response = client.web_detection(image=image)
        celebrities = [
            entity.description for entity in web_response.web_entities
            if 'celebrity' in entity.description.lower()
        ]

        return {
            'text': texts,
            'celebrities': celebrities,
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google Vision API: {e}")
        return {}

def search_media_by_omdb(query):
    """–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ —á–µ—Ä–µ–∑ OMDB API"""
    params = {
        "apikey": OMDB_API_KEY,
        "t": query,
        "plot": "short",
        "r": "json"
    }
    response = requests.get(OMDB_API_URL, params=params, timeout=10)
    if response.status_code == 200:
        data = response.json()
        if data.get('Response') == 'True':
            return {
                'title': data.get('Title'),
                'year': data.get('Year'),
                'plot': data.get('Plot'),
                'rating': data.get('imdbRating'),
                'poster': data.get('Poster'),
                'type': data.get('Type').capitalize(),
            }
    return {}

def format_media_info(media_data) -> tuple[str, str | None]:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ/—Å–µ—Ä–∏–∞–ª–µ"""
    if not media_data:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∫–∞–¥—Ä.", None

    title = media_data['title']
    year = media_data['year'] or 'N/A'
    media_type = media_data['type']
    rating = media_data['rating'] or 'N/A'
    plot = media_data['plot'] or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'
    poster_url = media_data['poster']

    info = f"üé¨ <b>{title}</b> ({year})"
    info += f"\nüìÄ –¢–∏–ø: {media_type}"
    info += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/10"
    info += f"\n\nüìù <i>{plot}</i>"

    return info, poster_url

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞, "
        "–∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º –ø–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–º—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –∫–∞–¥—Ä–∞!"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
    temp_file_path = None
    try:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        photo_file = await update.message.photo[-1].get_file()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as tmp_file:
            await photo_file.download_to_drive(tmp_file.name)
            temp_file_path = tmp_file.name
        logger.info(f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {temp_file_path}")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–¥—Ä...")
        media_data = detect_text_and_entities(temp_file_path)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–µ–π
        detected_text = media_data.get('text', '').strip()
        celebrities = media_data.get('celebrities', [])

        # –ü–æ–∏—Å–∫ –≤ OMDB API
        search_queries = [detected_text] + celebrities
        for query in search_queries:
            if not query:
                continue
            logger.info(f"–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
            media_info = search_media_by_omdb(query)
            if media_info:
                break

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        text, poster_url = format_media_info(media_info)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if poster_url:
            await update.message.reply_photo(
                photo=poster_url,
                caption=text,
                parse_mode='HTML'
            )
        else:
            await update.message.reply_text(text, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–π —Å–∫—Ä–∏–Ω—à–æ—Ç."
        )
    finally:
        # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if temp_file_path and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        application.run_polling()

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == '__main__':
    main()

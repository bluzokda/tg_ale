import os
import logging
import tempfile
import gc
import re
import requests
from PIL import Image, ImageEnhance
import pytesseract
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
OMDB_API_URL = "http://www.omdbapi.com/"
KINOPOISK_API_URL = "https://kinopoiskapiunofficial.tech/api/v2.1/films/search-by-keyword"

def preprocess_image(image_bytes: bytes) -> Image.Image:
    """–£–ª—É—á—à–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ OCR"""
    with Image.open(image_bytes) as img:
        # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä
        img.thumbnail((512, 512))
        
        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è OCR
        img = img.convert('L')  # –ß/–ë
        enhancer = ImageEnhance.Contrast(img)
        img = enhancer.enhance(2.0)
        enhancer = ImageEnhance.Sharpness(img)
        img = enhancer.enhance(2.0)
        return img

def extract_text_with_tesseract(image: Image.Image) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Tesseract OCR"""
    try:
        custom_config = r'--oem 3 --psm 6 -l eng+rus'
        text = pytesseract.image_to_string(image, config=custom_config)
        return text.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Tesseract OCR: {e}")
        return ""

def search_omdb(title: str) -> dict:
    """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ OMDb API"""
    try:
        params = {
            'apikey': os.getenv('OMDB_API_KEY'),
            't': title,
            'type': 'movie,series,episode',
            'plot': 'short',
            'r': 'json'
        }
        response = requests.get(OMDB_API_URL, params=params, timeout=15)
        data = response.json()
        return data if data.get('Response') == 'True' else {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OMDb API: {e}")
        return {}

def search_kinopoisk(title: str) -> dict:
    """–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Kinopoisk Unofficial API"""
    try:
        headers = {'X-API-KEY': os.getenv('KINOPOISK_API_KEY')}
        params = {'keyword': title}
        
        response = requests.get(
            KINOPOISK_API_URL,
            headers=headers,
            params=params,
            timeout=15
        )
        data = response.json()
        return data['films'][0] if data.get('films') else {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Kinopoisk API: {e}")
        return {}

def convert_kinopoisk_to_omdb(kinopoisk_data: dict) -> dict:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ Kinopoisk –≤ —Ñ–æ—Ä–º–∞—Ç OMDb"""
    return {
        'Title': kinopoisk_data.get('nameRu') or kinopoisk_data.get('nameEn', ''),
        'Year': kinopoisk_data.get('year', 'N/A'),
        'Type': 'movie',
        'Plot': kinopoisk_data.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
        'Poster': kinopoisk_data.get('posterUrl', ''),
        'imdbRating': kinopoisk_data.get('rating', 'N/A'),
        'Runtime': 'N/A',
        'Response': 'True',
        'Genre': ', '.join(genre['genre'] for genre in kinopoisk_data.get('genres', [])),
        'Director': next((p['name'] for p in kinopoisk_data.get('staff', []) 
                         if p.get('professionKey') == 'DIRECTOR'), 'N/A'),
        'imdbID': f"kp{kinopoisk_data.get('filmId', '')}"
    }

def search_media(title: str) -> dict:
    """–ü–æ–∏—Å–∫ –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ API"""
    # –ü—Ä–æ–±—É–µ–º OMDb –ø–µ—Ä–≤—ã–º
    omdb_result = search_omdb(title)
    if omdb_result:
        return omdb_result
    
    # –ï—Å–ª–∏ OMDb –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º Kinopoisk
    kinopoisk_result = search_kinopoisk(title)
    return convert_kinopoisk_to_omdb(kinopoisk_result) if kinopoisk_result else {}

def format_media_info(media_data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–µ"""
    if not media_data:
        return "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    title = media_data.get('Title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    year = media_data.get('Year', 'N/A')
    media_type = "–§–∏–ª—å–º" if media_data.get('Type') == 'movie' else "–°–µ—Ä–∏–∞–ª"
    rating = media_data.get('imdbRating', 'N/A')
    plot = media_data.get('Plot', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
    director = media_data.get('Director', 'N/A')
    genre = media_data.get('Genre', 'N/A')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    info = f"üé¨ <b>{title}</b> ({year})"
    info += f"\nüìÄ –¢–∏–ø: {media_type}"
    info += f"\nüé≠ –ñ–∞–Ω—Ä: {genre}"
    info += f"\nüé• –†–µ–∂–∏—Å—Å–µ—Ä: {director}"
    info += f"\n‚≠ê –†–µ–π—Ç–∏–Ω–≥: {rating}/10"
    info += f"\n\nüìù <i>{plot[:300]}{'...' if len(plot) > 300 else ''}</i>"
    
    # –ü–æ—Å—Ç–µ—Ä
    if media_data.get('Poster') and media_data['Poster'] != 'N/A':
        info += f"\n\nüñº <a href='{media_data['Poster']}'>–ü–æ—Å—Ç–µ—Ä</a>"
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫
    if media_data.get('imdbID', '').startswith('tt'):
        info += f"\n\nüîó <a href='https://www.imdb.com/title/{media_data['imdbID']}/'>IMDb</a>"
    elif media_data.get('imdbID', '').startswith('kp'):
        kp_id = media_data['imdbID'][2:]
        info += f"\n\nüîó <a href='https://www.kinopoisk.ru/film/{kp_id}/'>–ö–∏–Ω–æ–ø–æ–∏—Å–∫</a>"
    
    return info

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞, "
            "–∏ —è –Ω–∞–π–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω—ë–º!",
            parse_mode='HTML'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    try:
        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        photo_file = await update.message.photo[-2].get_file()
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            await photo_file.download_to_drive(temp_file.name)
            logger.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {temp_file.name}")
            
            # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ OCR
            processed_img = preprocess_image(temp_file.name)
            text = extract_text_with_tesseract(processed_img)
            
            if text:
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")
                # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ 3 —Å–ª–æ–≤–∞)
                cleaned_text = re.sub(r'\s+', ' ', text).strip()
                possible_title = ' '.join(cleaned_text.split('\n')[0].split()[:5])
                
                await update.message.reply_text(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {possible_title}")
                
                # –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                media_data = search_media(possible_title)
                response = format_media_info(media_data)
                await update.message.reply_text(response, parse_mode='HTML')
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏")
        
        # –†—É—á–Ω–æ–π –≤—ã–∑–æ–≤ —Å–±–æ—Ä—â–∏–∫–∞ –º—É—Å–æ—Ä–∞
        gc.collect()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    finally:
        try:
            os.unlink(temp_file.name)
        except Exception:
            pass

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        token = os.getenv('TELEGRAM_TOKEN')
        if not token:
            raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        if not os.getenv('OMDB_API_KEY') and not os.getenv('KINOPOISK_API_KEY'):
            logger.warning("API –∫–ª—é—á–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ–¥–∏–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        
        # –ó–∞–ø—É—Å–∫
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()
        
    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        raise

if __name__ == '__main__':
    main()

import os
import logging
import tempfile
import subprocess
import gc
import sys
from urllib.parse import urlparse

from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from pytube import YouTube
from google.cloud import vision
import requests
import ffmpeg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
OMDB_API_URL = "http://www.omdbapi.com/"

def check_ffmpeg():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ffmpeg –≤ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        result = subprocess.run(["ffmpeg", "-version"], capture_output=True, text=True)
        logger.info(f"FFmpeg version: {result.stdout.splitlines()[0] if result.stdout else 'Unknown'}")
        return True
    except Exception as e:
        logger.error(f"FFmpeg check failed: {e}")
        return False

def download_video(url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    try:
        if "youtube.com" in url or "youtu.be" in url:
            logger.info(f"Downloading YouTube video: {url}")
            yt = YouTube(url)
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
            stream = yt.streams.filter(only_audio=True, file_extension='mp4').first()
            if not stream:
                raise ValueError("No suitable stream found")
                
            temp_file = tempfile.NamedTemporaryFile(suffix='.mp4', delete=False)
            stream.download(filename=temp_file.name)
            logger.info(f"Video downloaded to: {temp_file.name}")
            return temp_file.name
        else:
            raise ValueError("Unsupported video source")
    except Exception as e:
        logger.error(f"Error downloading video: {e}")
        raise

def extract_frame(video_path: str, timestamp: int = 5) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å–µ–∫—É–Ω–¥–µ"""
    try:
        frame_path = tempfile.NamedTemporaryFile(suffix='.jpg', delete=False).name
        logger.info(f"Extracting frame at {timestamp}s from: {video_path}")
        
        (
            ffmpeg
            .input(video_path, ss=timestamp)
            .output(frame_path, vframes=1, qscale=0)
            .run(capture_stdout=True, capture_stderr=True, overwrite_output=True)
        )
        logger.info(f"Frame saved to: {frame_path}")
        return frame_path
    except Exception as e:
        logger.error(f"Error extracting frame: {e}")
        raise

def detect_content(image_path: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Google Vision API"""
    try:
        client = vision.ImageAnnotatorClient()
        
        with open(image_path, 'rb') as image_file:
            content = image_file.read()
        
        image = vision.Image(content=content)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º web detection –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        response = client.web_detection(image=image)
        web_detection = response.web_detection
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = []
        
        if web_detection.full_matching_images:
            results.extend([img.url for img in web_detection.full_matching_images][:3])
            
        if web_detection.pages_with_matching_images:
            results.extend([page.url for page in web_detection.pages_with_matching_images][:3])
            
        if web_detection.web_entities:
            results.extend([entity.description for entity in web_detection.web_entities if entity.description][:5])
            
        if web_detection.best_guess_labels:
            results.extend([label.label for label in web_detection.best_guess_labels])
        
        return " ".join(set(results)) if results else ""
    except Exception as e:
        logger.error(f"Error detecting content: {e}")
        return ""

def search_media(title: str) -> str:
    """–ò—â–µ—Ç –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ OMDb API"""
    try:
        params = {
            'apikey': os.getenv('OMDB_API_KEY'),
            't': title,
            'type': 'movie,series,episode',
            'plot': 'short'
        }
        
        logger.info(f"Searching media for: {title}")
        response = requests.get(OMDB_API_URL, params=params, timeout=10)
        data = response.json()
        
        if data.get('Response') == 'True':
            result = (
                f"üé¨ {data['Title']} ({data['Year']})\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {data.get('imdbRating', 'N/A')}/10\n"
                f"üìÄ –¢–∏–ø: {data['Type'].capitalize()}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['Plot']}"
            )
            logger.info(f"Media found: {data['Title']}")
            return result
        return ""
    except Exception as e:
        logger.error(f"Error searching media: {e}")
        return ""

def process_video(url: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    video_path = None
    frame_path = None
    
    try:
        # –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        video_path = download_video(url)
        
        # –®–∞–≥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞
        frame_path = extract_frame(video_path)
        
        # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        content = detect_content(frame_path)
        
        if content:
            logger.info(f"Detected content: {content}")
            # –®–∞–≥ 4: –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            media_info = search_media(content)
            return media_info if media_info else f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {content[:200]}..."
        
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç"
    
    except Exception as e:
        logger.error(f"Error processing video: {e}")
        return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for path in [video_path, frame_path]:
            if path and os.path.exists(path):
                try:
                    os.unlink(path)
                    logger.info(f"Deleted temp file: {path}")
                except Exception as e:
                    logger.error(f"Error deleting file {path}: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        gc.collect()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, "
            "–∏ —è –ø–æ–ø—Ä–æ–±—É—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á—Ç–æ —ç—Ç–æ –∑–∞ —Ñ–∏–ª—å–º –∏–ª–∏ —Å–µ—Ä–∏–∞–ª!",
            parse_mode='HTML'
        )
        logger.info(f"Start command from {user.id}")
    except Exception as e:
        logger.error(f"Error in start command: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        url = update.message.text.strip()
        parsed_url = urlparse(url)
        
        if not parsed_url.scheme or not parsed_url.netloc:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é URL-—Å—Å—ã–ª–∫—É")
            return
        
        logger.info(f"Processing URL: {url}")
        await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–¥–µ–æ...")
        
        result = process_video(url)
        await update.message.reply_text(result or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
        
    except Exception as e:
        logger.error(f"Error handling message: {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("="*50)
        logger.info("Starting application...")
        logger.info(f"Python version: {sys.version}")
        logger.info(f"Current directory: {os.getcwd()}")
        logger.info(f"Files in directory: {os.listdir()}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not check_ffmpeg():
            logger.critical("FFmpeg not available! Exiting.")
            return
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        token = os.getenv('TELEGRAM_TOKEN')
        if not token:
            raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()
        
    except Exception as e:
        logger.exception("CRITICAL ERROR DURING STARTUP")
        raise

if __name__ == '__main__':
    main()
